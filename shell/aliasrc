#!/bin/sh

# Use neovim for vim if present.
[ -x "$(command -v nvim)" ] && alias vim="nvim" vimdiff="nvim -d"

# Verbosity and settings that you pretty much just always are going to want.
alias \
	cp="cp -iv" \
	mv="mv -iv" \
	rm="rm -vI" \
	mkd="mkdir -pv" \
	ffmpeg="ffmpeg -hide_banner"

# Colorize commands when possible.
alias \
	l="ls -lahNF --color=auto --group-directories-first" \
	grep="grep --color=auto" \
	diff="diff --color=auto" \
	ccat="highlight --out-format=ansi"

# These common commands are just too long! Abbreviate them.
alias \
	s="sudo" \
	se="sudo $EDITOR" \
	sc="systemctl" \
	jc="journalctl -r" \
	ka="killall" \
	sdn="sudo shutdown -h now" \
	f="$FILE" \
	e="$EDITOR" \
	n="ncdu" \
	N="ncmpcpp" \
	smi="sudo make install" \
	pt="patch --merge -i" \
	T="tldr" \
	t="tldr -s" \
	W="which -a" \
	wa="whatis" \
	z="zathura"

alias \
	magit="nvim -c MagitOnly" \
	ref="shortcuts >/dev/null\ source ${XDG_CONFIG_HOME:-$HOME/.config}/shortcutrc \ source ${XDG_CONFIG_HOME:-$HOME/.config}/zshnameddirrc" \
 # pacman and yay
alias \
	p="sudo pacman" \
	y="yay" \
	psyu='sudo pacman -Syu' \
	yi="yay -Qi" \
	ye="yay -Qe" \
	ysua="yay -Sua --noconfirm" \
	yr="yay -Rnsu" \
	unlock="sudo rm /var/lib/pacman/db.lck" \
	c="sync;sudo sysctl vm.drop_caches=3" \
	cleanup='sudo pacman -Rnsu $(pacman -Qtdq)' \
	mirror="sudo reflector -f 20 -l 20 --number 10 --save /etc/pacman.d/mirrorlist"

 # checking filesystem
alias \
	lsf="lsblk -f" \
	dft="df -Th"

 # get top process eating memory / cpu if not work try excute : export LC_ALL='C'
alias \
	psmem='ps -e -orss=,args= | sort -b -k1 -nr | sed 11q' \
	pscpu='ps -e -o pcpu,cpu,nice,state,cputime,args|sort -k1,1n -nr | sed 11q'

 # History
alias \
	h='history' \
	hg='history 1 | grep -i' \
	hist10='print -l ${(o)history%% *} | uniq -c | sort -nr | head -n 10'

# youtube-dl
alias \
	yt="youtube-dl --add-metadata --write-auto-sub -i" \
	yta="yt -x -f bestaudio/best -i" \
	ytF="youtube-dl -F" \
	ytf="youtube-dl -f" \
	ytamp3="youtube-dl --extract-audio --audio-format mp3 -i" \
	yt3="youtube-dl -f 'bestvideo[height<=360]+bestaudio/best[height<=360]'" \
	yt4="youtube-dl -f 'bestvideo[height<=480]+bestaudio/best[height<=480]'" \
	ytvbest="youtube-dl --add-metadata -f bestvideo+bestaudio -i" \
	ytmeta="youtube-dl --write-description --write-info-json --write-annotations --write-sub --write-thumbnail -i" \
	ytsub="youtube-dl --skip-download --write-auto-sub"

## npm aliases
#alias \
	#cra="npx create-react-app"  \
	#nin="npm init" \
	#ni="npm install" \
	#nrs="npm run start -s --" \
	#nrb="npm run build -s --" \
	#nrd="npm run dev -s --" \
	#nrt="npm run test -s --" \
	#nrtw="npm run test:watch -s --" \
	#nrv="npm run validate -s --" \
	#rmn="rm -rf node_modules" \
	#npmwipe="rm -rf node_modules && npm i && echo NPM is done"
#
### yarn aliases
#alias \
	#yin="yarn init" \
	#yar="yarn run" \
	#yab="yarn build" \
	#yal="yarn lint:fix" \
	#yac="yarn commit" \
	#yas="yarn start" \
	#yasb="yarn storybook:start" \
	#yat="yarn test" \
	#yatw="yarn test:watch"

#Git Alias
alias \
 	 g='git' \
	 gin="git init" \
	 gs='git status -sb' \
	 gc='git commit -v' \
	 gca='git commit -v --amend' \
	 gcf='git config --global' \
	 ga='git add .' \
	 gpl='git pull' \
	 gh='git help everyday' \
	 gpom='git pull origin master' \
	 gpu='git push --set-upstream' \
	 gpuom='git push -u origin master' \
	 gd='git diff' \
	 gds='git diff --staged' \
	 gcm='git checkout master' \
	 gnb='git checkout -b' \
	 gac='git add . && git commit -v' \
	 grs='git restore --staged .' \
	 gr='git restore' \
	 grss='git restore --source' \
	 gre='git remote' \
	 gcl='git clone' \
	 gcle='git clean -fdi' \
	 gl="git log --graph --branches --abbrev-commit --decorate --format=format:'%C(bold green)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold red)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(yellow)%s%C(reset) %C(cyan)- %an%C(reset)' --all" \
	 gt='git ls-tree -r master --name-only' \
	 gb='git branch' \
	 gbr="git branch remote" \
	 gfr="git remote update"  \
	 gm='git merge' \
	 gf="git fetch" \
	 gst='git stash' \
	 gfa="git fetch --all" \
	 gf="git fetch origin" \
	 grf="git reflog" \
	 grh="git reset --hard HEAD~"

 # FUNCTION

 extract() {
	local remove_archive
	local success
	local extract_dir

	if (( $# == 0 )); then
		cat <<-'EOF' >&2
			Usage: extract [-option] [file ...]
			Options:
			    -r, --remove    Remove archive after unpacking.
		EOF
	fi

	remove_archive=1
	if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then
		remove_archive=0
		shift
	fi

	while (( $# > 0 )); do
		if [[ ! -f "$1" ]]; then
			echo "extract: '$1' is not a valid file" >&2
			shift
			continue
		fi

		success=0
		extract_dir="${1:t:r}"
		case "${1:l}" in
			(*.tar.gz|*.tgz) (( $+commands[pigz] )) && { pigz -dc "$1" | tar xv } || tar zxvf "$1" ;;
			(*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;
			(*.tar.xz|*.txz)
				tar --xz --help &> /dev/null \
				&& tar --xz -xvf "$1" \
				|| xzcat "$1" | tar xvf - ;;
			(*.tar.zma|*.tlz)
				tar --lzma --help &> /dev/null \
				&& tar --lzma -xvf "$1" \
				|| lzcat "$1" | tar xvf - ;;
			(*.tar.zst|*.tzst)
				tar --zstd --help &> /dev/null \
				&& tar --zstd -xvf "$1" \
				|| zstdcat "$1" | tar xvf - ;;
			(*.tar) tar xvf "$1" ;;
			(*.tar.lz) (( $+commands[lzip] )) && tar xvf "$1" ;;
			(*.tar.lz4) lz4 -c -d "$1" | tar xvf - ;;
			(*.tar.lrz) (( $+commands[lrzuntar] )) && lrzuntar "$1" ;;
			(*.gz) (( $+commands[pigz] )) && pigz -dk "$1" || gunzip -k "$1" ;;
			(*.bz2) bunzip2 "$1" ;;
			(*.xz) unxz "$1" ;;
			(*.lrz) (( $+commands[lrunzip] )) && lrunzip "$1" ;;
			(*.lz4) lz4 -d "$1" ;;
			(*.lzma) unlzma "$1" ;;
			(*.z) uncompress "$1" ;;
			(*.zip|*.war|*.jar|*.sublime-package|*.ipa|*.ipsw|*.xpi|*.apk|*.aar|*.whl) unzip "$1" -d $extract_dir ;;
			(*.rar) unrar x -ad "$1" ;;
			(*.rpm) mkdir "$extract_dir" && cd "$extract_dir" && rpm2cpio "../$1" | cpio --quiet -id && cd .. ;;
			(*.7z) 7za x "$1" ;;
			(*.deb)
				mkdir -p "$extract_dir/control"
				mkdir -p "$extract_dir/data"
				cd "$extract_dir"; ar vx "../${1}" > /dev/null
				cd control; tar xzvf ../control.tar.gz
				cd ../data; extract ../data.tar.*
				cd ..; rm *.tar.* debian-binary
				cd ..
			;;
			(*.zst) unzstd "$1" ;;
			(*)
				echo "extract: '$1' cannot be extracted" >&2
				success=1
			;;
		esac

		(( success = $success > 0 ? $success : $? ))
		(( $success == 0 )) && (( $remove_archive == 0 )) && rm "$1"
		shift
	done
}
 alias x=extract
